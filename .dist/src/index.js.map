{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\n\"use strict\";\nimport * as euglena_template from \"@euglena/template\";\nimport * as euglena from \"@euglena/core\";\nimport { sys, js } from \"cessnalib\";\nimport * as path from \"path\";\n\nconst git = require(\"simple-git\");\n\nimport Particle = euglena.AnyParticle;\n\nexport class Organelle extends euglena.alive.Organelle<particles.incoming.SapContent> {\n    public static readonly NAME = \"euglena.organelle.git\"\n    private sapContent: particles.incoming.SapContent;\n    git: any;\n    constructor() {\n        super(Organelle.NAME);\n    }\n    protected bindActions(addAction: (particleName: string, action: (particle: Particle, callback: (particle: Particle) => void) => void) => void): void {\n        addAction(particles.incoming.Sap.NAME, (particle: particles.incoming.Sap, callback) => {\n            this.sapContent = particle.data;\n            this.getAlive(particle);\n        });\n        addAction(particles.incoming.AddAndCommit.NAME, (particle: particles.incoming.AddAndCommit, callback: (particle: Particle) => void) => {\n            this.git.add(particle.data.filePath).\n                commit(particle.data.commitMessage, (err: any, data: any) => {\n                    if (err) {\n                        this.send(new euglena_template.alive.particle.Exception({ innerException: null, message: JSON.stringify(err) }, this.sapContent.euglenaName));\n                    } else {\n                        let call = callback || this.send;\n                        call(new particles.outgoing.ASyncEnd(this.sapContent.euglenaName, (data.summary.changes + data.summary.insertions + data.summary.deletions) > 0));\n                    }\n                });\n        });\n        addAction(particles.incoming.Push.NAME, (particle: particles.incoming.Push, callback: (particle: Particle) => void) => {\n            this.git.push('origin', 'master', {}, (err: any, data: any) => {\n                if (err) {\n                    this.send(new euglena_template.alive.particle.Exception({ innerException: null, message: JSON.stringify(err) }, this.sapContent.euglenaName));\n                } else {\n                    let call = callback || this.send;\n                    call(new particles.outgoing.ASyncEnd(this.sapContent.euglenaName));\n                }\n            });\n        });\n    }\n    private getAlive(particle: Particle) {\n\n        this.git = git(path.resolve(__dirname, particle.data.repositoryDirectory));\n\n        /**\n         * send a notification to the Cytoplasm\n         * to inform about the organelle has been ready to get requests\n         * */\n        this.send(new euglena_template.alive.particle.OrganelleHasComeToLife(this.name, this.sapContent.euglenaName));\n    }\n}\n\nexport namespace particles {\n    export namespace incoming {\n        export interface SapContent {\n            euglenaName: string,\n            repositoryDirectory: string\n        }\n        export class Sap extends euglena.ParticleV2<SapContent>{\n            public static readonly NAME = Organelle.NAME + \".sap\";\n\n            /**\n             *  TODO:\n             * Add fields needed from outside\n             * before started the organelle working\n             */\n\n            constructor(of: string, data: SapContent) {\n                super(new euglena.MetaV2(Sap.NAME, of), data);\n            }\n        }\n        export class AddAndCommit extends euglena.ParticleV2<{ filePath: string, commitMessage: string }>{\n            public static readonly NAME = \"AddAndCommit\";\n            constructor(content: { filePath: string, commitMessage: string }, of: string) {\n                super(new euglena.MetaV2(AddAndCommit.NAME, of), content);\n            }\n        }\n        export class Push extends euglena.ParticleV2<{}>{\n            public static readonly NAME = \"Push\";\n            constructor(of: string) {\n                super(new euglena.MetaV2(AddAndCommit.NAME, of));\n            }\n        }\n    }\n    export namespace outgoing {\n        export class ASyncEnd extends euglena.ParticleV2<any>{\n            public static readonly NAME = \"ASyncEnd\";\n            constructor(of: string, data?: any) {\n                super(new euglena.MetaV2(ASyncEnd.NAME, of), data);\n            }\n        }\n    }\n    export namespace shared {\n\n    }\n}\n"]}